Question: 
Problem
After graduating, you are asked to become the lead computer designer at Hyper Computers Inc. Your study of usage of high-level language constructs suggests that procedure calls are one of the most expensive operations. You have invented a scheme that reduces the loads and stores normally associated with procedure calls and returns. The first thing you do is run some experiments with and without this optimization. Your experiments use the same state-of-the-art optimizing compiler that will be used with either version of the computer. 

These experiments reveal the following information:
The clock rate of the unoptimized version is 5% higher.
30% of the instructions in the unoptimized version are loads or stores.
The optimized version executes 2/3 as many loads and stores as the unoptimized
version. For all other instructions the dynamic counts are unchanged.
All instructions (including load and store) take one clock cycle.

Which is faster? Justify your decision quantitatively.

Solution: 
Let's start with what we know from the given instructions: 
1. The unoptimized version has a 5% higher clock rate
2. 30% of instructions in the unoptimized version are loads/stores
3. The optimized version executes 2/3 as many loads/stores as the unoptimized version
4. All other instruction counts remain the same
4. All instructions take one clock cycle

Let's solve the problem here. 
Let total number of instructions in the unoptimized version be N.
So, with this, we realize that loads/stores in the unoptimized version is 0.3N
Other instructions make up 0.7N, which is N - 0.3N

For optimized version:
Loads/stores = 2/3 * 0.3N => 0.2N
Other instructions, unchanged, remain 0.7N
Total instructions is 0.2 + 0.7 => 0.9N 

Let clock cycle time for optimized version be T. 
Clock cycle time for optimized versino is T/1.05, 
This is due to 5% higher clock rate

Unoptimized version: 
The execution time is N * T/1.05 => NT/1.05

Optimized version: 
The execution time is 0.9N * T => 0.9NT

Comparing the two: 
Optimized is faster if 0.9NT is lesser than NT/1.05
  ==> 0.9 < 1/1.05
  ==> 0.9 < 0.952 

  Since 0.9 < 0.952, the optimized version is faster.

Therefore, the optimized version is about 5.5% faster the unoptimized version.
