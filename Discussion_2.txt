Question: 
Even though the Intel x86 ISA is a clear example of a CISC ISA, modern implementations of it (e.g. Core and Xeon) use many RISC ideas: register-based micro-instructions, pipelining,
simple branch micro-instructions, fixed length micro-instructions, etc. Some say that, since at the low level the latest Intel processors behave like a RISC, it is RISC. Others say that, since at the software interface (compiler) they are seen like a CISC, they are CISC.
Discuss at what level we should measure the complexity of ISA? What are the implications of considering the ISA at each level? Are the latest Intel processors RISC?

Solution. 
To measure the complexity of ISA, let's focus on the external level. 
x86 remains unambiguously CISC in various element: 
 -> Variable-length instructions (1-15 bytes)
 -> Memory-to-register and memory-to-memory operations. 
 -> Complex addressing modes.
 -> Relatively few general-purpose registers in the original design.

 The modern Intel processors translate these CISC instructions into RISC-like micro-operations that: 
 -> Have fixed length 
 -> Primarily used register-to-register operations.
 -> Follow many RISC design principles.

 The implications of considering the ISA at each level include the following: 
 -> Intel gained the code density and backward compatibility benefits of CISC.
 -> This approach implemented many of the performance benefits of RISC internally.