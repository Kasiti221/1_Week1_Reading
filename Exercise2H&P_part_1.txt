Question:

Several researchers have suggested that adding a register-memory addressing mode to a load-store machine might be useful. The idea is to replace sequences of:
LOAD Rx,0(Rb)
ADD Ry,Ry,Rx
by
ADD Ry,0(Rb)
Assume this new instruction will cause the clock period of the CPU to increase by 5%. 
Use the instruction frequencies for the gcc benchmark on the load-store machine from the image that I've shared.
The new instruction affects only the clock cycle and not the CPI.
1. What percentage of the loads must be eliminated for the machine with the new instruction to have at least the same performance?
2. Show a situation in a multiple instruction sequence where a load of a register (say Rx) followed immediately by a use of the same register (Rx) in an ADD instruction, could not be replaced by a single ADD instruction of the form proposed.


Solution: 
First Part: 
Getting the percentage of the loads that must be eliminated for machine with the new instructino to have at least the same performance.

What we know: 
New instruction increases clock period by 5%. 
Load instructions account for 22.8% of instructinos according to the table. 
We're replacing a LOAD + ADD sequence with a single ADD instruction.

Let the original execution time be T1, which is calculated by I * CPI * C where: 
I => Instruction counts
CPI => Cycles per instruction. 
C => clock cycle time. 

For the modified machine, let C' = 1.05C (5% increase in clock cycle time)

Let's say we eliminate x% of load instructions. Each eliminated load also eliminates an ADD operation, so we save 2 instructions and replace the with 1. 
So, if we eliminate x% of loads, then we eliminate x% * 22.8% of all instructions through load elimination.

New Instruction count: 
I' = I - (x% * 22.8% * I) - (x% * 22.8 * I)
=> I * x% * 22.8 * I
=> I(1-0.228x)

For the same performance:
I * CPI * C = I' * CPI * C'
I * C = I' * 1.05C
I = I' * 1.05 
I = I(1 - 0.228x) * 1.05
1 = (1 - 0.228x) * 1.05
1/1.05 = 1 - 0.228x
0.952 = 1.0.228*

-0.048 = -0.228x

x => 0.21 => 21%







