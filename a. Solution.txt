Understanding whats happening in the code fragment.

loop: LD R1,0(R2)      # Load value from the memory address in R2 into R1
      DADDI R1,R1,1    # Increment the value in R1 by 1
      SD 0(R2),R1      # Store the updated valaue from R1 back to address in R2
      DADDI R2,R2,4    # Increment R2 by 4 (moving to next memory word)
      DSUB R4,R3,R2    # R4 = R3-R2 (checking if we're done)
      BNEZ R4,loop     # Branch to loop if R4 â‰  0. (repeat the process if R2 != R3) 

      Let's get to the question now. 
      RISC pipeline without forwarding (except register file)

      With this as the instruction, we need 2 stalls after LD before using R1. 
      We also need 2 stalls after DSU before the branch can use R4. We have got the pipeline stages, which include: 
      IF => Instruction Fetch.
      ID => Instruction Decode and Register Read.
      EX => Execute 
      MEM => Memory access
      WB => Write Back       

      Solving the problem. 
      Analysis. 
      => Identify the Data hazards 
    1. Read After Write => Happens after LD, on R1 with DADDI
    2. After DSUB, we have a Read After Write hazard with BNEZ. 
      => Check the stalls due to hazards 
    1. LD writes back R1 in cycle 5 (WB Stage)
    2. DADDI needs R1 in cycle 3 (EX stage) but it's not ready yet.
    3. DADDI needs R1 in cycle 3 (EX stage) but it's not ready yet.
    4. DADDI must wait until after LD's WB stage --> 2 stall cycles needed after LD

    => Generate the pipeline diagram for a single iteration based on this knowledge.
      Cycle: 1  2   3   4   5   6   7   8   9   10  11  12
      LD     IF ID  EX  ME  WB
      DADDI     IF  ID  --  --  EX  ME  WB
      SD            IF  ID  --  --  EX  ME  WB
      DADDI             IF  ID  --  -- EX  ME  WB
      DSUB                  IF  ID  -- --  EX  WB 
      BNEZ                      IF  ID  EX             => Branch resolved in ID
      LD                            IF  ID  EX  ME  WB => The next iteration

    => Cycles per iteration. 
    First LD -> cycle 1. 
    Next LD -> cycle 9 (BNEZ is resolved in ID stage, cycle 8 ( next iteration's LD starts at cycle 9))
    Each iteration takes 8 cycles (9 - 1)

   => Total cycles: 
   Processing 396/4 -> 99 elements 
   99 * 8 cycles => 792 cycles. 
   For the last iteration when branch is not taken, we need to complete the 6 instructions which take 6 cycles. 
   Total cycles: 792 + 6 = 798 cycles.
